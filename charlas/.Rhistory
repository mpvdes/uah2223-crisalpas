binwidth,
color=I("yellow"),
fill="red",
xlab="Temperatura"
ylab="")
qplot(Temp, data=airquality, geom="histogram",
main="Histograma para la temperatura de mayo a septiembre en NY",
binwidth,
color=I("yellow"),
fill="red",
xlab="Temperatura",
ylab="")
qplot(Temp, data=airquality, geom="histogram",
main="Histograma para la temperatura de mayo a septiembre en NY",
binwidth=5,
color=I("yellow"),
fill="red",
xlab="Temperatura",
ylab="")
qplot(Temp, data=airquality, geom="histogram",
main="Histograma para la temperatura de mayo a septiembre en NY",
binwidth=10,
color=I("yellow"),
fill="red",
xlab="Temperatura",
ylab="")
qplot(Temp, data=airquality, geom="histogram",
main="Histograma para la temperatura de mayo a septiembre en NY",
binwidth=3,
color=I("yellow"),
fill="red",
xlab="Temperatura",
ylab="")
hist(airquality$Temp, col="red", main="Histograma para la temperatura de mayo a septiembre en NY")
qplot(Temp, data=airquality, geom="histogram",
main="Histograma para la temperatura de mayo a septiembre en NY",
binwidth=3,
color=I("yellow"),
fill="red",
xlab="Temperatura",
ylab="")
qplot(Temp, data=airquality, geom="histogram",
main="Histograma para la temperatura de mayo a septiembre en NY",
binwidth=3,
color=I("yellow"),
fill="red",
xlab="Temperatura",
ylab="")
knitr::opts_chunk$set(echo = TRUE)
sum(nums)/length(nums)
nums <- c(1,2,3,4,5)
nums <- c(1,2,3,4,5)
sum(nums)/length(nums)
mean(airquality$Temp)
x <- c(rnorm(10000)*10+45)
qplot(x, geom="histogram",
main="Distribución normal",
binwidth=4,
color=I("gray"))
x <- c(rnorm(10000)*10+45)
qplot(x, geom="histogram",
main="Distribución normal",
binwidth=4,
color=I("gray"))
library(qplot2)
library(qqplot2)
library(ggplot2)
qplot(x, geom="histogram",
main="Distribución normal",
binwidth=4,
color=I("gray"))
if(!require(moments)){install.packages("moments");require(moments)}
izq.sesgo <- rbeta(100000,100,6)*10
qplot(izq.sesgo, geom="histogram",
main="Distribución con sesgo negativo o simetría a la izquierda",
binwidth=0.05,
xlab=paste("sesgo:",skewness(izq.sesgo)),
ylab="")
median(c(3,7,6,10,3,7))
sueldos <- c(41000,40300,38000,500000,41500,37000,39600,39500)
media <- mean(sueldos)
mediana <- median(sueldos)
media
mediana
summary(sueldos)
datos <- c(1,3,5,6,7)
sum(abs(x-mean(x)))/length(x)
mean(datos)
sum(abs(datos-mean(datos)))/length(datos)
sum(abs(datos-mean(datos)))/length(datos)
mean(datos)
sum(abs(datos-mean(datos)))/length(datos)
sd(datos)
sd(x)
sum(abs(x-mean(x)))/length(x)
sum(abs(x-mean(x)))/length(x)
sd(x)
P(coger un coche de 4 carburadores)
barplot(table(mtcars$carb)/length(mtcars$carb))
hist(airquality$Temp, probability = TRUE, main="Distribución de la probabilidad")
barplot(table(mtcars$carb)/length(mtcars$carb))
hist(airquality$Temp, probability = TRUE, main="Distribución de la probabilidad")
barplot(table(mtcars$carb)/length(mtcars$carb))
hist(airquality$Temp, probability = TRUE, main="Distribución de la probabilidad")
dd
dd <- table(mtcars$carb)/length(mtcars$carb)
table(mtcars$carb)
dd
table(mtcars$carb)
dd
barplot(table(mtcars$carb)/length(mtcars$carb))
hist(airquality$Temp, probability = TRUE, main="Distribución de la probabilidad")
lines(density(airquality$Temp), col="red")
hist(airquality$Temp, probability = TRUE, main="Distribución de la probabilidad")
hist(airquality$Temp, probability = TRUE, main="Función de densidad",xlab="Temperatura")
hist(airquality$Temp, probability = TRUE, main="Distribución de la probabilidad")
lines(density(airquality$Temp), col="red")
hist(airquality$Temp, probability = TRUE, main="Función de densidad",xlab="Temperatura")
lines(density(airquality$Temp), col="red")
barplot(table(mtcars$carb)/length(mtcars$carb))
barplot(table(mtcars$carb)/length(mtcars$carb))
lines(density(airquality$Temp), col="red")
hist(airquality$Temp, probability = TRUE, main="Función de densidad",xlab="Temperatura")
lines(density(airquality$Temp), col="red")
lines(density(airquality$Temp), col="red")
hist(airquality$Temp, probability = TRUE, main="Función de densidad",xlab="Temperatura")
lines(density(airquality$Temp), col="red")
pdf <- approxfun(temp.densidad$x, temp.densidad$y, rule=2)
integrate(pdf,80,90)
temp.densidad <- density(airquality$Temp)
pdf <- approxfun(temp.densidad$x, temp.densidad$y, rule=2)
integrate(pdf,80,90)
knitr::opts_chunk$set(echo = TRUE)
head(airquality)
if(!require(datos)) {install.packages("datos"); require(datos)}
library(datos)
head(flores)
mean(flores$Largo.Petalo)
mean(flores$Largo.Petalo[flores$Especie=="setosa"])
mean(flores$Largo.Petalo[flores$Especie=="versicolor"])
mean(flores$Largo.Petalo[flores$Especie=="virginica"])
by(flores$Largo.Petalo, flores$Especie, mean)
by(flores$Largo.Petalo, flores$Especie, summary)
qplot(Especie, Ancho.Petalo, data=flores, geom="boxplot", fill=Especie)
library("ggplot2")
qplot(Especie, Ancho.Petalo, data=flores, geom="boxplot", fill=Especie)
library(ggplot2)
qplot(Largo.Petalo, data=flores, geom="density", alpha=(0.7), Especie)
library(ggplot2)
qplot(Largo.Petalo, data=flores, geom="density", alpha=I(0.7), fill=Especie)
ucba <- data.frame(UCBAdmissions)
head(ucba)
UCBAdmissions
cross
cross <- xtabs(Freq ~ Gender + Admit, data=ucba)
cross
prop.table(cross, 1)
cross2 <- xtabs(Freq ~ Gender + Admit, data=ucba[ucba$Dept=="A"])
cross2
cross
cross2
cross2 <- xtabs(Freq ~ Gender + Admit, data=ucba[ucba$Dept=="A",])
cross2
prop.table(cross2,1)
prop.table(cross2,1)
if(!require(vcd)){install.packages("vcd");require(vcd)}
if(!require(vcd)){install.packages("grid");require(grid)}
library(vcd)
library(grid)
mosaic(Freq ~ Gender + Admit, data=ucba, shade=TRUE, legend=FALSE)
mosaic(Freq ~ Gender + Admit, data=ucba[ucba$Dept=="A",], shade=TRUE, legend=FALSE)
library("ggplot2")
library(ggplot2)
qplot(height, weight, data=women, geom=c("point"))
La medida más básica para las correlaciones es la covarianza.
xs <- 1:100
cor(xs, xs+100)
cor(xs, xs^3)
cor(xs, xs+100, method="spearman")
cor(xs, xs^3, method="spearman")
qplot(xs, xs+100, geom=c("point"), se=FALSE)
qplot(xs, xs^3, geom=c("point"), se=FALSE)
qplot(xs, xs^3, geom=c("point", "smooth"), method="lm", se=FALSE)
qplot(xs, xs^3, geom=c("point", "smooth"), method="lm", se=FALSE)
cor(mtautos$peso, mtautos$millas)
cor(mtautos$peso, mtautos$millas)
qplot(peso, millas, data=mtautos, geom=c("point", "smooth"), method="lm", se=TRUE)
cor(airquality$Temp, airquality$Wind)
#spearman
cor(airquality$Temp, airquality$Wind, method="spearman")
#nube de puntos y línea de regresión
qplot(Temp, Wind, data=airquality, geom=c("point", "smooth"), method="lm", se=TRUE)
iris.nospecies <- iris[,-5]
cor(iris.nospecies)
#nube de puntos y línea de regresión
qplot(Temp, Wind, data=airquality, geom=c("point", "smooth"), method="lm", se=TRUE)
cor(iris.nospecies)
if(!require(corrgram)){install.packages("corrgram"; require(corrgram))}
if(!require(corrgram)) {install.packages("corrgram"); require(corrgram)}
library(corrgram)
corrgram(flores, lower.panel = panel.conf, upper.panel = panel.pts)
corrgram(flores, lower.panel = panel.conf, upper.panel = panel.pts)
corrgram(flores, lower.panel = panel.conf, upper.panel = panel.density)
corrgram(flores, lower.panel = panel.conf, upper.panel = panel.density)
corrgram(flores, lower.panel = panel.conf, upper.panel = panel.density)
corrgram(flores, lower.panel = pie, upper.panel = pts, diag.panel = panel.density())
corrgram(flores, lower.panel = panel.pie, upper.panel = pts, diag.panel = panel.density)
corrgram(flores, lower.panel = panel.pie, upper.panel = panel.pts, diag.panel = panel.density)
example(corrgram)
corrgram(flores, lower.panel = panel.pie, upper.panel = panel.pts, diag.panel = panel.density)
install.packages("igraph")
install.packages("tools")
install.packages("tools")
library(tools)
str(pkgs)
pkgs <- available.packages
str(pkgs)
library(tools)
library(igraph)
pkgs <- available.packages
str(pkgs)
head(package.dependencies(pkgs))
head(package_dependencies(pkgs))
head(package_dependencies(pkgs),3)
head(package.dependencies(pkgs),3)
head(package_dependencies(pkgs),3)
str(pkgs)
head(package_dependencies(pkgs),3)
head(package_dependencies(pkgs),3)
str(pkgs)
pkgs <- available.packages
pkgs <- available.packages()
str(pkgs)
head(package_dependencies(pkgs),3)
#help("package_dependencies")
```
library(plyr)
install.packages("plyr")
library(plyr)
} )
edges <- ldpy(c('Dependes','Imports','Suggest'), function(depLevel)
deps <- package.dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), funcion(pkg)
edges <- ldpy(c('Dependes','Imports','Suggest'), function(depLevel)
deps <- package.dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), funcion(pkg)
edges <- ldpy(c('Dependes','Imports','Suggest'), function(depLevel){
deps <- package.dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), funcion(pkg)
if(!identical(deps[[pkg]],NA))
edges <- ldpy(c('Dependes','Imports','Suggest'), function(depLevel){
deps <- package.dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), funcion(pkg)
if(!identical(deps[[pkg]],NA))
ldply(names(deps), function(pkg)
if(!identical(deps[[pkg]],NA))
data.frame(
src = pkg,
dep = deps[[pkg]][,1],
label = depLevel,
stringsAsFactors = FALSE))
edges <- ldpy(c('Dependes','Imports','Suggest'), function(depLevel){
deps <- package.dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), function(pkg)
if(!identical(deps[[pkg]],NA))
data.frame(
src = pkg,
dep = deps[[pkg]][,1],
label = depLevel,
stringsAsFactors = FALSE))
})
edges <- ldpy(c('Dependes','Imports','Suggest'), function(depLevel){
deps <- package.dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), function(pkg)
if(!identical(deps[[pkg]],NA))
data.frame(
src = pkg,
dep = deps[[pkg]][,1],
label = depLevel,
stringsAsFactors = FALSE))
} )
edges <- ldply(c('Dependes','Imports','Suggest'), function(depLevel){
deps <- package.dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), function(pkg)
if(!identical(deps[[pkg]],NA))
data.frame(
src = pkg,
dep = deps[[pkg]][,1],
label = depLevel,
stringsAsFactors = FALSE))
} )
deps <- package_dependencies(pkgs, depLevel = depLevel)
deps <- package_dependencies(pkgs, depLevel = depLevel)
deps <- package.dependencies(pkgs, depLevel = depLevel)
deps <- package_dependencies(pkgs, depLevel = depLevel)
edges <- ldply(c('Dependes','Imports','Suggest'), function(depLevel){
deps <- package_dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), function(pkg)
if(!identical(deps[[pkg]],NA))
data.frame(
src = pkg,
dep = deps[[pkg]][,1],
label = depLevel,
stringsAsFactors = FALSE))
} )
#install.packages("plyr")
library(plyr)
pkgs <- available.packages()
edges <- ldply(c('Dependes','Imports','Suggest'), function(depLevel){
deps <- package_dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), function(pkg)
if(!identical(deps[[pkg]],NA))
data.frame(
src = pkg,
dep = deps[[pkg]][,1],
label = depLevel,
stringsAsFactors = FALSE))
} )
#install.packages("plyr")
library(plyr)
pkgs <- available.packages()
edges <- ldply(c('Depends','Imports','Suggest'), function(depLevel){
deps <- package_dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), function(pkg)
if(!identical(deps[[pkg]],NA))
data.frame(
src = pkg,
dep = deps[[pkg]][,1],
label = depLevel,
stringsAsFactors = FALSE))
} )
pkgs <- available.packages()
edges <- ldply(c('Depends','Imports','Suggest'), function(depLevel){
deps <- package_dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), function(pkg)
if(!identical(deps[[pkg]],NA))
data.frame(
src = pkg,
dep = deps[[pkg]][,1],
label = depLevel,
stringsAsFactors = FALSE))
} )
edges <- ldply(c('Depends','Imports','Suggests'), function(depLevel){
deps <- package_dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), function(pkg)
if(!identical(deps[[pkg]],NA))
data.frame(
src = pkg,
dep = deps[[pkg]][,1],
label = depLevel,
stringsAsFactors = FALSE))
} )
deps <- package_dependencies(pkgs, depLevel = depLevel)
edges <- ldply(c('Depends','Imports','Suggests'), function(depLevel) {
deps <- package_dependencies(pkgs, depLevel = depLevel)
ldply(names(deps), function(pkg)
if(!identical(deps[[pkg]],NA))
data.frame(
src = pkg,
dep = deps[[pkg]][,1],
label = depLevel,
stringsAsFactors = FALSE))
} )
library(dep)
library(depLevel)
install.packages("dep")
install.packages("depLevel")
library(depLevel)
install.packages("depLevel")
av <- available.packages(filters=list())
av[av[, "depLevel"] == pkg, ]
av[av[, "dep"] == pkg, ]
av[av[, "Package"] == pkg, ]
nrow(edges)/(nrow(pkgs)*(nrow(pkgs)-1))
head(sort(table(edges$dep), decreasing = TRUE)
head(sort(table(edges$dep), decreasing = TRUE)
head(sort(table(edges$dep), decreasing = TRUE)
library(igraph)
library(igraph)
g <- graph.data.frame(edges)
head(sort(table(edges$dep), decreasing = TRUE,)
head(sort(table(edges$dep), decreasing = TRUE),
summary(g)
g <- graph.data.frame(edges)
graph.density(g)
nrow(edges)/(nrow(pkgs)*(nrow(pkgs)-1))
head(sort(degree(g), decreasing = TRUE))
head(sort(betweenness(g), decreasing = TRUE))
head(sort(betweenness(g), decreasing = TRUE))
# Movernos a la carpeta de trabajo
setwd("C:/Users/crisa/Documents/mpvd/uah2223-crisalpas/charlas")
# Cargar librerías / paquetes
install.packages("tidyverse")
library(tidyverse)
install.packages("rvest")
library(rvest)
install.packages("xml2")
install.packages("xml2")
library(xml2)
## 0 ## --------- Scrapear el código entero de la web
web_nominados <- read_html("https://www.premiosgoya.com/36-
edicion/nominaciones/por-categoria/")
## 0 ## --------- Scrapear el código entero de la web
web_nominados <- read_html("https://www.premiosgoya.com/36-edicion/nominaciones/por-categoria/")
web_nominados
categorias_html <- html_elements(web_nominados, "categoria-de-peliculas__titulo")
categorias <- html_text(categorias_html)
categorias <- web_nominados %>%
html_elements(".categoria-de-peliculas__titulo") %>%
html_text()
print(categorias)
carteles_htmls <- html_elements(web_nominados, ".lista-de-peliculas__cartel img")
carteles <- html_attr(carteles_htmls, "src")
carteles <- web_nominados %>%
html_elements(".lista-de-peliculas__cartel img") %>%
html_attr("src")
print(carteles)
peliculasmd <- html_elements(web_nominados, ".categoria-de-peliculas")[[1]] %>%
html_elements(".lista-de-peliculas__titulo") %>%
html_children() %>%
html_text() %>% trimws()
peliculasmd <- html_elements(web_nominados, ".categoria-de-peliculas")[[1]] %>%
html_elements(".lista-de-peliculas__titulo") %>%
html_children() %>%
html_text() %>% trimws()
print(peliculasmd)
peliculasmd_htmlentero <- html_elements(web_nominados, ".categoria-de-peliculas")[[1]]
peliculasmd_htmlentero
peliculasmd_htmlentero
print(peliculasmd_htmlentero)
print(peliculasmd_htmldividido)
peliculasmd_htmldividido <- html_elements(peliculasmd_htmlentero, ".lista-depeliculas__titulo")
print(peliculasmd_htmldividido)
peliculasmd_htmlentero <- html_elements(web_nominados, ".categoria-de-peliculas")[[1]]
print(peliculasmd_htmlentero)
peliculasmd_htmldividido <- html_elements(peliculasmd_htmlentero, ".lista-depeliculas__titulo")
print(peliculasmd_htmldividido)
# Nos queremos quedar sólo con el elemento 'hijo', ya que ahí está el texto del nombre la
película
peliculasmd_elementos <- html_children(peliculasmd_htmldividido)
peliculasmd_htmlentero <- html_elements(web_nominados, ".categoria-de-peliculas")[[1]]
## 0 ## --------- Scrapear el código entero de la web
web_nominados <- read_html("https://www.premiosgoya.com/36-edicion/nominaciones/por-categoria/")
# Vemos el código html
web_nominados
## 0 ## --------- Scrapear el código entero de la web
web_nominados <- read_html("https://www.premiosgoya.com/36-edicion/nominaciones/por-categoria/")
# Vemos el código html
web_nominados
categorias_html <- html_elements(web_nominados, "categoria-de-peliculas__titulo")
categorias <- html_text(categorias_html)
categorias <- web_nominados %>%
html_elements(".categoria-de-peliculas__titulo") %>%
html_text()
categorias_html <- html_elements(web_nominados, ".categoria-de-peliculas__titulo")
categorias <- html_text(categorias_html)
categorias <- web_nominados %>%
html_elements(".categoria-de-peliculas__titulo") %>%
html_text()
print(categorias)
carteles_htmls <- html_elements(web_nominados, ".lista-de-peliculas__cartel img")
carteles <- html_attr(carteles_htmls, "src")
carteles <- web_nominados %>%
html_elements(".lista-de-peliculas__cartel img") %>%
html_attr("src")
print(carteles)
peliculasmd_htmlentero <- html_elements(web_nominados, ".categoria-de-peliculas")[[1]]
print(peliculasmd_htmlentero)
peliculasmd_htmldividido <- html_elements(peliculasmd_htmlentero, ".lista-depeliculas__titulo")
peliculasmd_htmldividido <- html_elements(peliculasmd_htmlentero, ".lista-de-peliculas__titulo")
print(peliculasmd_htmldividido)
peliculasmd_elementos <- html_children(peliculasmd_htmldividido)
print(peliculasmd_elementos)
print(peliculasmd_contenido)
peliculasmd_contenido <- html_text(peliculasmd_elementos)
print(peliculasmd_contenido)
peliculasmd <- trimws(peliculasmd_contenido)
print(peliculasmd)
peliculasmd <- html_elements(web_nominados, ".categoria-de-peliculas")[[1]] %>%
html_elements(".lista-de-peliculas__titulo") %>%
html_children() %>%
html_text() %>% trimws()
print(peliculasmd)
peliculasdn_htmlentero <- html_elements(web_nominados, ".categoria-de-peliculas")[[3]]
print(peliculasdn_htmlentero)
peliculasdn_htmlentero <- html_elements(web_nominados, ".categoria-de-peliculas")[[3]]
print(peliculasdn_htmlentero)
peliculasdn_htmldividido <- html_elements(peliculasdn_htmlentero, ".lista-de-peliculas__texto")
print(peliculasdn_htmldividido)
peliculasdn_elementos <- html_children(peliculasdn_htmldividido)
print(peliculasdn_elementos)
peliculasdn_contenido <- html_text(peliculasdn_elementos)
print(peliculasmd_contenido)
print(peliculasdn_elementos)
print(peliculasdn_contenido)
peliculasdn <- html_elements(web_nominados, ".categoria-de-peliculas")[[3]] %>%
html_elements(".lista-de-peliculas__texto") %>%
html_children() %>%
html_text()
print(peliculasdn)
print(peliculasdn_htmldividido)
print(peliculasdn_elementos)
print(peliculasdn_contenido)
peliculasdn <- html_elements(web_nominados, ".categoria-de-peliculas")[[3]] %>%
html_elements(".lista-de-peliculas__texto") %>%
html_children() %>%
html_text()
print(peliculasdn)
peliculasdn <- html_elements(web_nominados, ".categoria-de-peliculas")[[3]] %>%
html_elements(".lista-de-peliculas__texto p") %>%
html_text()
print(peliculasdn)
